{
    "pipes": [],
    "interfaces": [
        {
            "name": "AppState",
            "id": "interface-AppState-1325fef1a964dd2e4317db95cca1de3fad993a91164e58820a7155ad6b93bb0a1aa89df7bd4c6df8dd5686aa0da4341ce2005ded471df34da286123690a8d3ce",
            "file": "src/app/store/index.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {AuthObj, Todo} from \"./interfaces\";\r\nimport {RouterReducerState} from \"@ngrx/router-store\";\r\n\r\nexport interface AppState {\r\n  todoState: TodoState,\r\n  router: RouterReducerState,\r\n  authState: AuthState\r\n}\r\n\r\nexport interface AuthState {\r\n  user: AuthObj,\r\n  isLogged: boolean\r\n}\r\n\r\nexport interface TodoState {\r\n  todos: Todo[],\r\n  noData: boolean,\r\n  error: any\r\n}\r\n",
            "properties": [
                {
                    "name": "authState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AuthState",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "router",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RouterReducerState",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "todoState",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TodoState",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "AuthObj",
            "id": "interface-AuthObj-7b18d1bb447ef8a138dc7852c67b4c8e15f326b43fe054409d1fd16cc3909a7e0478c539e5b604db5f047b6ba9ac4426a4a2a4d33eba5c84cfa8ffcb248b0943",
            "file": "src/app/store/interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Todo {\r\n  text: string;\r\n  todo: boolean;\r\n  id: number;\r\n}\r\n\r\nexport interface AuthObj {\r\n  username: string,\r\n  password: string\r\n}\r\n",
            "properties": [
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "AuthState",
            "id": "interface-AuthState-1325fef1a964dd2e4317db95cca1de3fad993a91164e58820a7155ad6b93bb0a1aa89df7bd4c6df8dd5686aa0da4341ce2005ded471df34da286123690a8d3ce",
            "file": "src/app/store/index.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {AuthObj, Todo} from \"./interfaces\";\r\nimport {RouterReducerState} from \"@ngrx/router-store\";\r\n\r\nexport interface AppState {\r\n  todoState: TodoState,\r\n  router: RouterReducerState,\r\n  authState: AuthState\r\n}\r\n\r\nexport interface AuthState {\r\n  user: AuthObj,\r\n  isLogged: boolean\r\n}\r\n\r\nexport interface TodoState {\r\n  todos: Todo[],\r\n  noData: boolean,\r\n  error: any\r\n}\r\n",
            "properties": [
                {
                    "name": "isLogged",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AuthObj",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "DataSets",
            "id": "interface-DataSets-b7d5e50275b68d7bbab7f5f1528374ba866a92a4f8931e2f5e9da77546672bb9548ec8db9d89e7673158942caf4de87309473a516500da75f9cdeaf94be5c50a",
            "file": "src/app/components/chart/chart.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\nimport {Chart} from 'chart.js/auto';\n\nexport interface DataSets {\n  label: string,\n  data: string[],\n  backgroundColor: string\n}\n\n@Component({\n  selector: 'app-chart',\n  templateUrl: './chart.component.html',\n  styleUrls: ['./chart.component.css']\n})\n\nexport class ChartComponent implements OnInit{\n\n  public chart: any;\n  @Input() dataSets: DataSets[];\n\n  ngOnInit(): void {\n    this.createChart();\n  }\n\n  createChart(){\n    this.chart = new Chart(\"MyChart\", {\n      type: 'bar',\n      data: {\n        labels: ['2022-05-10', '2022-05-11', '2022-05-12','2022-05-13',\n          '2022-05-14', '2022-05-15', '2022-05-16','2022-05-17'],\n        datasets: this.dataSets,\n      },\n      options: {\n        aspectRatio:2.5\n      }\n\n    });\n  }\n\n}\n",
            "properties": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "Todo",
            "id": "interface-Todo-7b18d1bb447ef8a138dc7852c67b4c8e15f326b43fe054409d1fd16cc3909a7e0478c539e5b604db5f047b6ba9ac4426a4a2a4d33eba5c84cfa8ffcb248b0943",
            "file": "src/app/store/interfaces.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Todo {\r\n  text: string;\r\n  todo: boolean;\r\n  id: number;\r\n}\r\n\r\nexport interface AuthObj {\r\n  username: string,\r\n  password: string\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "todo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "TodoState",
            "id": "interface-TodoState-1325fef1a964dd2e4317db95cca1de3fad993a91164e58820a7155ad6b93bb0a1aa89df7bd4c6df8dd5686aa0da4341ce2005ded471df34da286123690a8d3ce",
            "file": "src/app/store/index.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {AuthObj, Todo} from \"./interfaces\";\r\nimport {RouterReducerState} from \"@ngrx/router-store\";\r\n\r\nexport interface AppState {\r\n  todoState: TodoState,\r\n  router: RouterReducerState,\r\n  authState: AuthState\r\n}\r\n\r\nexport interface AuthState {\r\n  user: AuthObj,\r\n  isLogged: boolean\r\n}\r\n\r\nexport interface TodoState {\r\n  todos: Todo[],\r\n  noData: boolean,\r\n  error: any\r\n}\r\n",
            "properties": [
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "noData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "todos",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Todo[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AuthService",
            "id": "injectable-AuthService-ed9cd716a902ec69b8f95f079a9f77303f84d98abd17dae654e4a9edf1a482ac96307c750450ac8c61a708ff3df5819d18dd3d4294175fbf52c5b68422252daa",
            "file": "src/app/services/auth.service.ts",
            "properties": [
                {
                    "name": "urlForAddRemoveTodoData",
                    "defaultValue": "'assets/add-todo.json'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "urlForGetTodoData",
                    "defaultValue": "'assets/get-todo.json'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {HttpClient} from \"@angular/common/http\";\nimport {Observable} from \"rxjs\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private urlForGetTodoData = 'assets/get-todo.json';\n  private urlForAddRemoveTodoData = 'assets/add-todo.json';\n\n  constructor(private http: HttpClient) {}\n\n  public login(): Observable<any> {\n    return this.http.get<any>(this.urlForGetTodoData);\n  }\n\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "TodoEffects",
            "id": "injectable-TodoEffects-f306eea9f3deba51185d1768fb581598de9034ab06037fdf975c2bd9dc3943a2e5c3e5274f5a40d1cb854386d7f2fe4359d00e970e427d2e55ee320171695b63",
            "file": "src/app/store/effects.ts",
            "properties": [
                {
                    "name": "actionSubmit$",
                    "defaultValue": "createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ActionSubmit),\r\n      switchMap((action) =>\r\n        this.authSrv.login().pipe(\r\n          map(data => {\r\n            this.route.navigate(['dashboard']);\r\n            return LoginSuccess({ state: {username: action.state.username, password: action.state.password } })\r\n          }),\r\n          catchError(error => {\r\n            return of(loadMyDataError({ error }))\r\n          })\r\n        )\r\n      )\r\n    )\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "addData$",
                    "defaultValue": "createEffect(() => this.actions$.pipe(\r\n    ofType(AddData),\r\n    concatMap((action) => this.todoSrv.addTodo(action)\r\n      .pipe(\r\n        map((data) => AddDataSuccess({ id: action.id, text: action.text })),\r\n      )),\r\n  ))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "loadMyData$",
                    "defaultValue": "createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(loadMyData),\r\n      switchMap(() =>\r\n        this.todoSrv.getData().pipe(\r\n          map(data => {\r\n            if (!data.payload.length) {\r\n              return noData({state: true});\r\n            }else{\r\n              return loadMyDataSuccess({ response: data.payload, state: false })\r\n            }\r\n          }),\r\n          catchError(error => {\r\n            return of(loadMyDataError({ error }))\r\n          })\r\n        )\r\n      )\r\n    )\r\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "removeData$",
                    "defaultValue": "createEffect(() => this.actions$.pipe(\r\n    ofType(Remove),\r\n    mergeMap((action) => this.todoSrv.removeTodo(action)\r\n      .pipe(\r\n        map((data) => RemoveDataSuccess({ id: action.id })),\r\n      )),\r\n  ))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 53
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\r\nimport {catchError, concatMap, exhaustMap, map, mergeMap, switchMap } from 'rxjs/operators';\r\nimport {\r\n  ActionSubmit,\r\n  AddData,\r\n  AddDataSuccess,\r\n  loadMyData,\r\n  loadMyDataError,\r\n  loadMyDataSuccess, LoginSuccess,\r\n  noData,\r\n  Remove,\r\n  RemoveDataSuccess\r\n} from './actions';\r\nimport {TodoService} from \"../services/todo.service\";\r\nimport {of} from \"rxjs\";\r\nimport {AuthService} from \"../services/auth.service\";\r\nimport {Router} from \"@angular/router\";\r\n\r\n@Injectable()\r\nexport class TodoEffects {\r\n  constructor(private actions$: Actions, private todoSrv: TodoService, private authSrv: AuthService,\r\n              private route: Router) {}\r\n\r\n  loadMyData$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(loadMyData),\r\n      switchMap(() =>\r\n        this.todoSrv.getData().pipe(\r\n          map(data => {\r\n            if (!data.payload.length) {\r\n              return noData({state: true});\r\n            }else{\r\n              return loadMyDataSuccess({ response: data.payload, state: false })\r\n            }\r\n          }),\r\n          catchError(error => {\r\n            return of(loadMyDataError({ error }))\r\n          })\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n  addData$ = createEffect(() => this.actions$.pipe(\r\n    ofType(AddData),\r\n    concatMap((action) => this.todoSrv.addTodo(action)\r\n      .pipe(\r\n        map((data) => AddDataSuccess({ id: action.id, text: action.text })),\r\n      )),\r\n  ));\r\n\r\n  removeData$ = createEffect(() => this.actions$.pipe(\r\n    ofType(Remove),\r\n    mergeMap((action) => this.todoSrv.removeTodo(action)\r\n      .pipe(\r\n        map((data) => RemoveDataSuccess({ id: action.id })),\r\n      )),\r\n  ));\r\n\r\n  actionSubmit$ = createEffect(() =>\r\n    this.actions$.pipe(\r\n      ofType(ActionSubmit),\r\n      switchMap((action) =>\r\n        this.authSrv.login().pipe(\r\n          map(data => {\r\n            this.route.navigate(['dashboard']);\r\n            return LoginSuccess({ state: {username: action.state.username, password: action.state.password } })\r\n          }),\r\n          catchError(error => {\r\n            return of(loadMyDataError({ error }))\r\n          })\r\n        )\r\n      )\r\n    )\r\n  );\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "todoSrv",
                        "type": "TodoService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authSrv",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "route",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "actions$",
                        "type": "Actions",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "todoSrv",
                        "type": "TodoService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authSrv",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "TodoService",
            "id": "injectable-TodoService-f3c150ab1c5275062d78d272e50b4eb13692db74c01dccf70b7bdbaf599255f692aff92e48edbc514355639802333ba67a426630833ef0dabfad2589e4f6c3a5",
            "file": "src/app/services/todo.service.ts",
            "properties": [
                {
                    "name": "urlForAddRemoveTodoData",
                    "defaultValue": "'assets/add-todo.json'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "urlForGetTodoData",
                    "defaultValue": "'assets/get-todo.json'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addTodo",
                    "args": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getData",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "removeTodo",
                    "args": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class TodoService {\n  private urlForGetTodoData = 'assets/get-todo.json';\n  private urlForAddRemoveTodoData = 'assets/add-todo.json';\n\n  constructor(private http: HttpClient) {}\n\n  public getData(): Observable<any> {\n    return this.http.get<any>(this.urlForGetTodoData);\n  }\n\n  public addTodo(data: any): Observable<any> {\n    return this.http.get<any>(this.urlForAddRemoveTodoData);\n  }\n\n  public removeTodo(data: any): Observable<any> {\n    return this.http.get<any>(this.urlForAddRemoveTodoData);\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "AuthGuard",
            "id": "injectable-AuthGuard-fb17e638d02e988861237152e0849aaa8fbd31a36749353e190c50b6d83b71171edeaab939f0791da73f57fa1f656a898a86fbc3fabd21dfce391132fd942068",
            "file": "src/app/auth.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable | Promise | boolean | UrlTree",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree} from '@angular/router';\nimport {Observable, take} from 'rxjs';\nimport {select, Store} from \"@ngrx/store\";\nimport {selectAllTodos, selectIsLogged} from \"./store/selector\";\nimport {map} from \"rxjs/operators\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n\n  constructor(private store: Store, private router: Router) {\n  }\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    return this.store.pipe(\n      select(selectIsLogged),\n      map(isLogged => {\n        if (!isLogged) {\n          this.router.navigate(['/login']);\n          return false;\n        }\n        return true;\n      }),\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        }
    ],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-cb1563927ba049b47cc29432ef4decf45c55e157c5135891c0b730f227ae5417b421cc4d2800772c3d671eea0547e14616dad95a8de763d68a62e0c8d2d90bba",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dataSets",
                    "defaultValue": "[ {\n    label: \"Sales1\",\n    data: ['467','576', '572', '79', '92',\n      '574', '573', '576'],\n    backgroundColor: 'black'\n  },\n    {\n      label: \"Sales2\",\n      data: ['467','576', '572', '79', '92',\n        '574', '573', '576'],\n      backgroundColor: 'green'\n    }]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "httpError$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component} from '@angular/core';\nimport {Observable} from \"rxjs\";\nimport {select, Store} from \"@ngrx/store\";\nimport {selectHttpError} from \"./store/selector\";\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\n\nexport class AppComponent {\n  httpError$: Observable<boolean>\n\n  dataSets = [ {\n    label: \"Sales1\",\n    data: ['467','576', '572', '79', '92',\n      '574', '573', '576'],\n    backgroundColor: 'black'\n  },\n    {\n      label: \"Sales2\",\n      data: ['467','576', '572', '79', '92',\n        '574', '573', '576'],\n      backgroundColor: 'green'\n    }];\n\n  constructor(private store: Store) {\n    this.httpError$ = this.store.pipe(select(selectHttpError));\n  }\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "* {\r\n  font-family: \"Californian FB\";\r\n}\r\n\r\n\r\n",
                    "styleUrl": "./app.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div *ngIf=\"httpError$ | async\" class=\"text-center alert alert-danger\" role=\"alert\">\n  Si è verificato un errore durante la chiamata HTTP!\n</div>\n<router-outlet></router-outlet>\n"
        },
        {
            "name": "ChartComponent",
            "id": "component-ChartComponent-b7d5e50275b68d7bbab7f5f1528374ba866a92a4f8931e2f5e9da77546672bb9548ec8db9d89e7673158942caf4de87309473a516500da75f9cdeaf94be5c50a",
            "file": "src/app/components/chart/chart.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-chart",
            "styleUrls": [
                "./chart.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./chart.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "dataSets",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "DataSets[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "chart",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "createChart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input, OnInit} from '@angular/core';\nimport {Chart} from 'chart.js/auto';\n\nexport interface DataSets {\n  label: string,\n  data: string[],\n  backgroundColor: string\n}\n\n@Component({\n  selector: 'app-chart',\n  templateUrl: './chart.component.html',\n  styleUrls: ['./chart.component.css']\n})\n\nexport class ChartComponent implements OnInit{\n\n  public chart: any;\n  @Input() dataSets: DataSets[];\n\n  ngOnInit(): void {\n    this.createChart();\n  }\n\n  createChart(){\n    this.chart = new Chart(\"MyChart\", {\n      type: 'bar',\n      data: {\n        labels: ['2022-05-10', '2022-05-11', '2022-05-12','2022-05-13',\n          '2022-05-14', '2022-05-15', '2022-05-16','2022-05-17'],\n        datasets: this.dataSets,\n      },\n      options: {\n        aspectRatio:2.5\n      }\n\n    });\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "canvas {\r\n  max-width: 100%;\r\n}\r\n",
                    "styleUrl": "./chart.component.css"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"chart-container\">\n  <canvas  id=\"MyChart\" >{{ chart }}</canvas>\n</div>\n"
        },
        {
            "name": "DashboardTodoComponent",
            "id": "component-DashboardTodoComponent-44b2b554f046c1dd77d83497f1ace474f52086f233206be83000662a6e3a4ce410608a30973a72a8b0a8e40e271bc659fa8edf2c2c3a2170dd2955d876817f0b",
            "file": "src/app/pages/dashboard-todo/dashboard-todo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dashboard-todo",
            "styleUrls": [
                "./dashboard-todo.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./dashboard-todo.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "index",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "newTodoText",
                    "defaultValue": "\"\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "noDataError$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "todos$",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<Todo[]>",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "addTodo",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core';\nimport {Observable} from \"rxjs\";\nimport {Todo} from \"../../store/interfaces\";\nimport {select, Store} from \"@ngrx/store\";\nimport {AppState} from \"../../store\";\nimport {selectAllTodos, selectNoDataError} from \"../../store/selector\";\nimport {AddData, loadMyData, Remove, Reply, Toggle} from \"../../store/actions\";\nimport {Router} from \"@angular/router\";\n\n@Component({\n  selector: 'app-dashboard-todo',\n  templateUrl: './dashboard-todo.component.html',\n  styleUrls: ['./dashboard-todo.component.css']\n})\nexport class DashboardTodoComponent implements OnInit{\n  todos$: Observable<Todo[]>;\n  noDataError$: Observable<boolean>\n  newTodoText: string = \"\";\n  index: number;\n\n  constructor(private store: Store<AppState>,\n              private router: Router) {\n    this.todos$ = this.store.pipe(select(selectAllTodos));\n    this.noDataError$ = this.store.pipe(select(selectNoDataError));\n    this.index = 1;\n  }\n\n  ngOnInit(): void {\n    this.store.dispatch(loadMyData());\n  }\n\n  addTodo() {\n    this.index++;\n    this.store.dispatch(AddData({ text: this.newTodoText || 'Untitled task', id: this.index }));\n  }\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".todo {\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  padding: 10px;\r\n  background: rgba(0, 163, 192, 0.507);\r\n  margin: 4px;\r\n  border-radius: 5px;\r\n  box-shadow: rgba(0, 0, 0, 0.4) 0px 2px 4px, rgba(0, 0, 0, 0.3) 0px 7px 13px -3px, rgba(0, 0, 0, 0.2) 0px -3px 0px inset;\r\n}\r\n\r\n.not-todo {\r\n  text-decoration: line-through;\r\n}\r\n\r\n.not-todo-container {\r\n  opacity: 0.4;\r\n}\r\n\r\nh1{\r\n  font-size: 2rem;\r\n  font-weight: bold;\r\n  text-transform: uppercase;\r\n  letter-spacing: 2px;\r\n  color: white;\r\n  margin-bottom: 1rem;\r\n  text-align: center;\r\n  border-bottom: 2px solid white;\r\n  padding-bottom: 0.5rem;\r\n}\r\n\r\n.input-group {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 10px;\r\n}\r\n\r\n.btn {\r\n  border-radius: 0 4px 4px 0;\r\n  border: none;\r\n}\r\n\r\n",
                    "styleUrl": "./dashboard-todo.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container mt-2\">\n  <div class=\"row\">\n\n    <div class=\"col-12\">\n      <h1 class=\"text-center my-4\">\n        My Todos\n      </h1>\n    </div>\n  </div>\n\n  <div class=\"row mt-3\">\n\n    <div class=\"col-4\"></div>\n    <div class=\"col-4\">\n      <form>\n        <div class=\"input-group col-xs-3 d-flex justify-content-center\">\n          <input type=\"text\" class=\"form-control form-control-md\" [ngModelOptions]=\"{standalone: true}\"\n                 [(ngModel)]=\"newTodoText\" placeholder=\"Inserisci todo...\">\n          <button class=\"btn btn-primary\" (click)=\"addTodo()\"><i class=\"bi bi-plus-lg\"></i></button>\n        </div>\n      </form>\n    </div>\n\n    <div *ngIf=\"noDataError$ | async as noDataError\" class=\"col-12 text-center\">\n      <p class=\"fw-bold\">{{noDataError ? 'Non ci sono todo presenti' : ''}}</p>\n    </div>\n\n      <div *ngFor=\"let todo of todos$ | async\" class=\"mb-3\" [ngClass]=\"{'not-todo-container': !todo.todo}\">\n        <todo-item [todo]=\"todo\" ></todo-item>\n      </div>\n\n\n  </div>\n</div>\n"
        },
        {
            "name": "DettaglioTodoComponent",
            "id": "component-DettaglioTodoComponent-04a453333c0325545d485032530e1a8bc9cdda904b7dc14b691fb348a7329776d178139b2f6ed9fd768d32fb876a192572b0484079b895a34862131312a44b8e",
            "file": "src/app/pages/dettaglio-todo/dettaglio-todo.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dettaglio-todo",
            "styleUrls": [
                "./dettaglio-todo.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./dettaglio-todo.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "todo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Todo | undefined",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "goBack",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport {Router} from \"@angular/router\";\nimport {select, Store} from \"@ngrx/store\";\nimport {Todo} from \"../../store/interfaces\";\nimport {first, Observable} from \"rxjs\";\nimport {selectTodoById} from \"../../store/selector\";\n\n@Component({\n  selector: 'app-dettaglio-todo',\n  templateUrl: './dettaglio-todo.component.html',\n  styleUrls: ['./dettaglio-todo.component.css']\n})\nexport class DettaglioTodoComponent {\n\n  todo: Todo | undefined;\n\n  constructor(private store: Store, private router: Router) {\n    this.store.pipe(select(selectTodoById))\n      .pipe(first())\n      .subscribe(todo => {\n        this.todo = todo;\n      });\n  }\n\n  public goBack() {\n    this.router.navigate(['']);\n  }\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "h1{\r\n  font-size: 2rem;\r\n  font-weight: bold;\r\n  text-transform: uppercase;\r\n  letter-spacing: 2px;\r\n  color: white;\r\n  margin-bottom: 1rem;\r\n  text-align: center;\r\n  border-bottom: 2px solid white;\r\n  padding-bottom: 0.5rem;\r\n}\r\n\r\n.card {\r\n  border: none;\r\n  border-radius: 4px;\r\n  overflow: hidden;\r\n}\r\n\r\n.card-img-top {\r\n  object-fit: cover;\r\n  height: 200px;\r\n}\r\n\r\n.card-title {\r\n  font-size: 1.5rem;\r\n}\r\n\r\n.card-text {\r\n  font-size: 1rem;\r\n}\r\n\r\n.shadow-custom{\r\n  box-shadow: rgba(0, 0, 0, 0.4) 0px 2px 4px, rgba(0, 0, 0, 0.3) 0px 7px 13px -3px, rgba(0, 0, 0, 0.2) 0px -3px 0px inset;\r\n}\r\n\r\nhr {\r\n  border: 0;\r\n  border-top: 1px solid black;\r\n}\r\n\r\n.btn-secondary {\r\n  color: #fff;\r\n  background-color: #6c757d;\r\n  border-color: #6c757d;\r\n}\r\n\r\n.btn-secondary:hover {\r\n  color: #fff;\r\n  background-color: #5a6268;\r\n  border-color: #545b62;\r\n}\r\n\r\n.btn-secondary:focus, .btn-secondary.focus {\r\n  box-shadow: 0 0 0 0.2rem rgba(108, 117, 125, 0.5);\r\n}\r\n\r\n",
                    "styleUrl": "./dettaglio-todo.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"container mt-2\">\n  <div class=\"row\">\n\n    <div class=\"col-12\">\n      <h1 class=\"text-center my-4\">\n        Dettaglio todo\n      </h1>\n    </div>\n  </div>\n\n <div class=\"col-12 shadow-custom mt-3\">\n   <div class=\" mb-3\">\n     <div class=\"row no-gutters\">\n       <div class=\"col-md-4\">\n         <img src=\"https://picsum.photos/600/550\" alt=\"Immagine di esempio\" class=\"img-fluid\">\n       </div>\n       <div class=\"col-md-8\">\n         <div class=\"card-body\">\n           <h5 class=\"card-title mt-3\">{{ todo?.text }}</h5>\n           <p class=\"card-text\">{{ todo?.todo ? 'Attivo' : 'Non attivo'}}</p>\n           <hr>\n           <p>\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\"</p>\n            <button class=\"btn btn-secondary my-3 float-end me-3\" (click)=\"goBack()\">Indietro</button>\n         </div>\n\n       </div>\n     </div>\n   </div>\n </div>\n\n\n\n</div>\n"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-9262034447083b34c3496bad05dab582d1dbf9bfdc8cf782547960d93ead82ef14b6ef8a7f09dd4a3410cec1b6a74815e0479ce78732f28142a941eb9918f901",
            "file": "src/app/pages/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [
                "./login.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "loginForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "submitted",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport {FormBuilder, FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {Store} from \"@ngrx/store\";\nimport {ActionSubmit} from \"../../store/actions\";\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\n\nexport class LoginComponent {\n  loginForm: FormGroup;\n  submitted = false;\n\n  constructor(private formBuilder: FormBuilder, private store: Store) {\n    this.loginForm = this.formBuilder.group({\n      username: ['', Validators.required],\n      password: ['', Validators.required]\n    });\n  }\n\n  onSubmit() {\n    this.submitted = true;\n    if (this.loginForm.invalid) {\n      return;\n    }\n    const userObj = {\n      username: this.loginForm.get('username')?.value,\n      password: this.loginForm.get('password')?.value\n    };\n    this.store.dispatch(ActionSubmit({state: userObj}))\n  }\n\n  get username() {\n    return this.loginForm.get('username');\n  }\n\n  get password() {\n    return this.loginForm.get('password');\n  }\n}\n\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "html {\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\nbody {\r\n  background: linear-gradient(to right, #ffff00 0%, #ff6600 100%);\r\n  color: rgba(0, 0, 0, 0.6);\r\n  font-family: \"Roboto\", sans-serif;\r\n  font-size: 14px;\r\n  line-height: 1.6em;\r\n  -webkit-font-smoothing: antialiased;\r\n  -moz-osx-font-smoothing: grayscale;\r\n}\r\n\r\n.overlay,\r\n.form-panel.one:before {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  display: none;\r\n  background: rgba(0, 0, 0, 0.8);\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n.form {\r\n  z-index: 15;\r\n  position: relative;\r\n  background: #FFFFFF;\r\n  width: 600px;\r\n  border-radius: 4px;\r\n  box-shadow: 0 0 30px rgba(0, 0, 0, 0.1);\r\n  box-sizing: border-box;\r\n  margin: 100px auto 10px;\r\n  overflow: hidden;\r\n}\r\n\r\n.form-group {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n  margin: 0 0 20px;\r\n}\r\n\r\n.form-group:last-child {\r\n  margin: 0;\r\n}\r\n\r\n.form-group label {\r\n  display: block;\r\n  margin: 0 0 10px;\r\n  color: rgba(0, 0, 0, 0.6);\r\n  font-size: 12px;\r\n  font-weight: 500;\r\n  line-height: 1;\r\n  text-transform: uppercase;\r\n  letter-spacing: 0.2em;\r\n}\r\n\r\n.two .form-group label {\r\n  color: #FFFFFF;\r\n}\r\n\r\n.form-group input {\r\n  outline: none;\r\n  display: block;\r\n  background: rgba(0, 0, 0, 0.1);\r\n  width: 100%;\r\n  border: 0;\r\n  border-radius: 4px;\r\n  box-sizing: border-box;\r\n  padding: 12px 20px;\r\n  color: rgba(0, 0, 0, 0.6);\r\n  font-family: inherit;\r\n  font-size: inherit;\r\n  font-weight: 500;\r\n  line-height: inherit;\r\n  transition: 0.3s ease;\r\n}\r\n\r\n.form-group input:focus {\r\n  color: rgba(0, 0, 0, 0.8);\r\n}\r\n\r\n.two .form-group input {\r\n  color: #FFFFFF;\r\n}\r\n\r\n.two .form-group input:focus {\r\n  color: #FFFFFF;\r\n}\r\n\r\n.form-group button {\r\n  outline: none;\r\n  background: #ff3126;\r\n  width: 100%;\r\n  border: 0;\r\n  border-radius: 4px;\r\n  padding: 12px 20px;\r\n  color: #FFFFFF;\r\n  font-family: inherit;\r\n  font-size: inherit;\r\n  font-weight: 500;\r\n  line-height: inherit;\r\n  text-transform: uppercase;\r\n  cursor: pointer;\r\n}\r\n\r\n.two .form-group button {\r\n  background: #FFFFFF;\r\n  color: #4285F4;\r\n}\r\n\r\n.form-group .form-remember {\r\n  font-size: 12px;\r\n  font-weight: 400;\r\n  letter-spacing: 0;\r\n  text-transform: none;\r\n}\r\n\r\n.form-group .form-remember input[type=checkbox] {\r\n  display: inline-block;\r\n  width: auto;\r\n  margin: 0 10px 0 0;\r\n}\r\n\r\n.form-group .form-recovery {\r\n  color: #4285F4;\r\n  font-size: 12px;\r\n  text-decoration: none;\r\n}\r\n\r\n.form-panel {\r\n  padding: 60px calc(5% + 60px) 60px 60px;\r\n  box-sizing: border-box;\r\n}\r\n",
                    "styleUrl": "./login.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "username": {
                    "name": "username",
                    "getSignature": {
                        "name": "username",
                        "type": "",
                        "returnType": "",
                        "line": 35
                    }
                },
                "password": {
                    "name": "password",
                    "getSignature": {
                        "name": "password",
                        "type": "",
                        "returnType": "",
                        "line": 39
                    }
                }
            },
            "templateData": "<div class=\"form\">\n  <div class=\"form-toggle\"></div>\n  <div class=\"form-panel one\">\n    <div class=\"form-header mb-4\">\n      <h1 style=\"color: black\">Login</h1>\n    </div>\n    <div class=\"form-content\">\n      <form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\n        <div class=\"form-group\">\n          <label for=\"username\">Username</label>\n          <input type=\"text\" id=\"username\" name=\"username\" class=\"form-control\"\n                 formControlName=\"username\" [ngClass]=\"{ 'is-invalid': submitted && username?.invalid }\" />\n          <div *ngIf=\"submitted && username?.invalid\" class=\"invalid-feedback\">\n            <div *ngIf=\"username?.errors?.required\">Username is required.</div>\n          </div>\n        </div>\n\n        <div class=\"form-group\">\n          <label for=\"password\">Password</label>\n          <input type=\"password\" id=\"password\" name=\"password\" class=\"form-control\"\n                 formControlName=\"password\" [ngClass]=\"{ 'is-invalid': submitted && password?.invalid }\" />\n          <div *ngIf=\"submitted && password?.invalid\" class=\"invalid-feedback\">\n            <div *ngIf=\"password?.errors?.required\">Password is required.</div>\n          </div>\n        </div>\n\n        <button type=\"submit\" class=\"btn btn-primary\" (click)=\"onSubmit()\">Login</button>\n      </form>\n\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "TableComponent",
            "id": "component-TableComponent-f1d05a976cd9fc67f129e7e14dd048f42857ed6f570ac5b2d29d45b7715b26ba065584747aaf85a54a3b86994a100e51a66f17525c235514c7b135b3e46fc038",
            "file": "src/app/components/table/table.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-table",
            "styleUrls": [
                "./table.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./table.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "columns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string[] | undefined",
                    "decorators": []
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "any[] | undefined",
                    "decorators": []
                },
                {
                    "name": "show",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "boolean | undefined",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\n\n@Component({\n  selector: 'app-table',\n  templateUrl: './table.component.html',\n  styleUrls: ['./table.component.css']\n})\nexport class TableComponent {\n  @Input() data: any[] | undefined;\n  @Input() columns: string[] | undefined;\n  @Input() show: boolean | undefined;\n\n\n  constructor() {\n  }\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "table {\r\n  border-collapse: collapse;\r\n  width: 100%;\r\n}\r\n\r\nth, td {\r\n  border: 1px solid #ddd;\r\n  padding: 8px;\r\n  text-align: left;\r\n}\r\n\r\nth {\r\n  background-color: black;\r\n  font-weight: bold;\r\n}\r\n",
                    "styleUrl": "./table.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            },
            "templateData": "<table>\n  <thead>\n  <tr>\n    <th *ngFor=\"let column of columns\">{{column}}</th>\n  </tr>\n  </thead>\n  <tbody>\n  <tr *ngFor=\"let item of data\">\n    <td *ngFor=\"let column of columns\">{{item[column]}}</td>\n  </tr>\n  </tbody>\n</table>\n"
        },
        {
            "name": "TodoItemComponent",
            "id": "component-TodoItemComponent-ca9f1c46a20399a5db84f74289e183c0a286ff77858ce43ef48aec97fb8a8d847b5244a9364c56672b4b5e1fbbdf5f28fd903d1712f56e075003913a85f27511",
            "file": "src/app/components/todo-item/todo-item.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "todo-item",
            "styleUrls": [
                "./todo-item.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./todo-item.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "todo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "Todo | undefined",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "goToDetailTodo",
                    "args": [
                        {
                            "name": "selectedTodo",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "selectedTodo",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeTodo",
                    "args": [
                        {
                            "name": "id",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "replyTodo",
                    "args": [
                        {
                            "name": "todo",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "todo",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleTodo",
                    "args": [
                        {
                            "name": "id",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\nimport {Remove, Reply, Toggle} from \"../../store/actions\";\nimport {Todo} from \"../../store/interfaces\";\nimport {Store} from \"@ngrx/store\";\nimport {Router} from \"@angular/router\";\n\n@Component({\n  selector: 'todo-item',\n  templateUrl: './todo-item.component.html',\n  styleUrls: ['./todo-item.component.css']\n})\nexport class TodoItemComponent {\n\n  @Input() todo: Todo | undefined;\n\n  constructor(private store: Store, private router: Router) {\n  }\n\n  removeTodo(id: any) {\n    this.store.dispatch(Remove({ id }));\n  }\n\n  toggleTodo(id: any) {\n    this.store.dispatch(Toggle({ id }));\n  }\n\n  replyTodo(todo: any) {\n    this.store.dispatch(Reply({ text: todo.text || 'Untitled task', id:  Math.floor(Math.random() * 100) }));\n  }\n\n  goToDetailTodo(selectedTodo: any) {\n    this.router.navigate(['dettaglio', selectedTodo.id]);\n  }\n\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".todo {\r\n  padding: 10px;\r\n  background: rgba(0, 163, 192, 0.507);\r\n  border-radius: 5px;\r\n  box-shadow: rgba(0, 0, 0, 0.4) 0px 2px 4px, rgba(0, 0, 0, 0.3) 0px 7px 13px -3px, rgba(0, 0, 0, 0.2) 0px -3px 0px inset;\r\n}\r\n\r\n.not-todo {\r\n  text-decoration: line-through;\r\n}\r\n\r\n.not-todo-container {\r\n  opacity: 0.4;\r\n}\r\n\r\n.switch-small {\r\n  position: relative;\r\n  display: inline-block;\r\n  width: 35px;\r\n  height: 20px;\r\n}\r\n\r\n.switch-small input {\r\n  opacity: 0;\r\n  width: 0;\r\n  height: 0;\r\n}\r\n\r\n.slider {\r\n  position: absolute;\r\n  cursor: pointer;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background-color: #ccc;\r\n  -webkit-transition: .4s;\r\n  transition: .4s;\r\n}\r\n\r\n.slider:before {\r\n  position: absolute;\r\n  content: \"\";\r\n  height: 16px;\r\n  width: 16px;\r\n  left: 2px;\r\n  bottom: 2px;\r\n  background-color: white;\r\n  -webkit-transition: .4s;\r\n  transition: .4s;\r\n}\r\n\r\ninput:checked + .slider {\r\n  background-color: #2196F3;\r\n}\r\n\r\ninput:checked + .slider:before {\r\n  -webkit-transform: translateX(15px);\r\n  -ms-transform: translateX(15px);\r\n  transform: translateX(15px);\r\n}\r\n\r\n.slider.round {\r\n  border-radius: 20px;\r\n}\r\n\r\n.slider.round:before {\r\n  border-radius: 50%;\r\n}\r\n\r\nh1{\r\n  font-size: 2rem;\r\n  font-weight: bold;\r\n  text-transform: uppercase;\r\n  letter-spacing: 2px;\r\n  color: white;\r\n  margin-bottom: 1rem;\r\n  text-align: center;\r\n  border-bottom: 2px solid white;\r\n  padding-bottom: 0.5rem;\r\n}\r\n\r\n.btn {\r\n  border-radius: 0 4px 4px 0;\r\n  border: none;\r\n}\r\n\r\n",
                    "styleUrl": "./todo-item.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"col-12 todo d-flex \">\n  <label class=\"switch-small mt-1 mx-2\">\n    <input type=\"checkbox\" [checked]=\"todo?.todo\" (click)=\"toggleTodo(todo?.id)\">\n    <span class=\"slider round\"></span>\n  </label>\n  <button class=\"btn btn-primary\" style=\"border-radius: 20px\" (click)=\"replyTodo(todo)\"><i class=\"bi bi-reply\"></i></button>\n  <button class=\"btn btn-primary mx-2\" style=\"border-radius: 20px\" (click)=\"removeTodo(todo?.id)\"><i class=\"bi bi-trash3\"></i></button>\n  <span class=\"mx-2 mt-1\" style=\"cursor: pointer\" (click)=\"goToDetailTodo(todo)\" [ngClass]=\"{'not-todo': !todo?.todo}\">\n    <b>{{todo?.text}}</b>\n  </span>\n</div>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-ea921129e5581880c9d13a19e4f02300da92e373ca0d06ba7a96e99de4de0650245848021b4ed46c04124ffa97041ac74ab6930b3ca40e767b174533148e5442",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { AppComponent } from './app.component';\nimport {provideStore, StoreModule} from \"@ngrx/store\";\nimport { StoreDevtoolsModule } from \"@ngrx/store-devtools\";\nimport {authReducer, todoReducer} from \"./store/reducers\";\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\nimport { EffectsModule } from \"@ngrx/effects\";\nimport { TodoEffects } from \"./store/effects\";\nimport { HttpClientModule } from \"@angular/common/http\";\nimport {provideRouterStore, routerReducer, StoreRouterConnectingModule} from \"@ngrx/router-store\";\nimport {provideRouter, RouterModule} from \"@angular/router\";\nimport { DashboardTodoComponent } from './pages/dashboard-todo/dashboard-todo.component';\nimport {AppRoutingModule} from \"./app-routing.module\";\nimport { DettaglioTodoComponent } from './pages/dettaglio-todo/dettaglio-todo.component';\nimport { LoginComponent } from './pages/login/login.component';\nimport { TodoItemComponent } from './components/todo-item/todo-item.component';\nimport { TableComponent } from './components/table/table.component';\nimport { ChartComponent } from './components/chart/chart.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    DashboardTodoComponent,\n    DettaglioTodoComponent,\n    LoginComponent,\n    TodoItemComponent,\n    TableComponent,\n    ChartComponent,\n  ],\n  imports: [\n    BrowserModule,\n    RouterModule,\n    AppRoutingModule,\n    StoreModule.forRoot({todoState: todoReducer, router: routerReducer, authState: authReducer}),\n    StoreRouterConnectingModule.forRoot(),\n    StoreDevtoolsModule.instrument(),\n    EffectsModule.forRoot([TodoEffects]),\n    FormsModule,\n    HttpClientModule,\n    ReactiveFormsModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "ChartComponent"
                        },
                        {
                            "name": "DashboardTodoComponent"
                        },
                        {
                            "name": "DettaglioTodoComponent"
                        },
                        {
                            "name": "LoginComponent"
                        },
                        {
                            "name": "TableComponent"
                        },
                        {
                            "name": "TodoItemComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-02c097c0a0533b6e2874be70ce90d89b8b3073f705cec8d220733823da6995abab84372304a361c334461a4b8a9c558414447d17b65f6899aaac8125c6e58dcd",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport {DashboardTodoComponent} from \"./pages/dashboard-todo/dashboard-todo.component\";\r\nimport {DettaglioTodoComponent} from \"./pages/dettaglio-todo/dettaglio-todo.component\";\r\nimport {LoginComponent} from \"./pages/login/login.component\";\r\nimport {AuthGuard} from \"./auth.guard\";\r\n\r\nconst routes: Routes = [\r\n  { path: 'dashboard', component: DashboardTodoComponent, canActivate: [AuthGuard] },\r\n  { path: 'dettaglio/:id', component: DettaglioTodoComponent, canActivate: [AuthGuard] },\r\n  {path: 'login', component: LoginComponent},\r\n  { path: '**', component: DashboardTodoComponent, canActivate: [AuthGuard] },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "ActionSubmit",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Todo Component] Action Login submit', props<{ state: AuthObj}>())"
            },
            {
                "name": "AddData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Todo Component] Add Data',props<{id: number, text: string}>())"
            },
            {
                "name": "AddDataSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Todo Component] Add data successfully', props<{id: number, text: string}>())"
            },
            {
                "name": "authReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/reducers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\r\n  initialAuthState,\r\n\r\n  on(LoginSuccess, (state, action) => {\r\n    return {\r\n      ...state,\r\n      isLogged: true,\r\n      user: {username: action.state.username, password: action.state.password}\r\n    };\r\n  }),\r\n\r\n\r\n\r\n)"
            },
            {
                "name": "initialAuthState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/reducers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "AuthState",
                "defaultValue": "{\r\n  user: {\r\n    username: '',\r\n    password: ''\r\n  },\r\n  isLogged: false\r\n}"
            },
            {
                "name": "initialTodoState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/reducers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "TodoState",
                "defaultValue": "{\r\n  todos: [],\r\n  noData: false,\r\n  error: ''\r\n}"
            },
            {
                "name": "loadMyData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Todo Component] Load Data')"
            },
            {
                "name": "loadMyDataError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Todo Component] Load Data Error', props<{ error: any }>())"
            },
            {
                "name": "loadMyDataSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Todo Component] Load Data Success', props<{ response: Todo[], state: boolean }>())"
            },
            {
                "name": "LoginSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Todo Component] Login success', props<{ state: AuthObj}>())"
            },
            {
                "name": "MultiLine",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/chart/chart.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "noData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Todo Component] No data', props<{ state: boolean }>())"
            },
            {
                "name": "Remove",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Todo Component] Remove', props<{id: number}>())"
            },
            {
                "name": "RemoveDataSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Todo Component] Remove data successfully', props<{id: number}>())"
            },
            {
                "name": "Reply",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Todo Component] Reply', props<{text: string, id: number}>())"
            },
            {
                "name": "selectAllTodos",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/selector.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectTodoState,\r\n  (state: TodoState) => state.todos\r\n)"
            },
            {
                "name": "selectAuthState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/selector.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(state: any) => state.authState"
            },
            {
                "name": "selectHttpError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/selector.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectTodoState,\r\n  (state: TodoState) => state.error\r\n)"
            },
            {
                "name": "selectIsLogged",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/selector.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectAuthState,\r\n  (state: AuthState) => state.isLogged\r\n)"
            },
            {
                "name": "selectNoDataError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/selector.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectTodoState,\r\n  (state: TodoState) => state.noData\r\n)"
            },
            {
                "name": "selectTodoById",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/selector.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\r\n  selectAllTodos,\r\n  selectRouteParams,\r\n  (todo,  todoId ) => todo.find(x => x.id == parseInt(todoId['id']))\r\n)"
            },
            {
                "name": "selectTodoState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/selector.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(state: any) => state.todoState"
            },
            {
                "name": "SingleLine",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/chart/chart.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Table",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/table/table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/chart/chart.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ChartComponent>",
                "defaultValue": "(args) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/table/table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<TableComponent>",
                "defaultValue": "(args) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/todo-item/todo-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<TodoItemComponent>",
                "defaultValue": "(args: TodoItemComponent) => ({\r\n  component: TodoItemComponent,\r\n  props: args,\r\n})"
            },
            {
                "name": "TodoItem",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/todo-item/todo-item.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "todoReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/reducers.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\r\n  initialTodoState,\r\n  on(AddDataSuccess, Reply, (state, action) => {\r\n    return {\r\n      ...state,\r\n      todos: [...state.todos, { id: action.id, text: action.text, todo: true }]\r\n    };\r\n  }),\r\n\r\n  on(loadMyDataSuccess, (state, action) => {\r\n    return {\r\n      ...state,\r\n      todos: action.response,\r\n      noData: action.state\r\n    };\r\n  }),\r\n\r\n  on(RemoveDataSuccess, (state, action) => {\r\n    return {\r\n      ...state,\r\n      todos: state.todos.filter(i => i.id !== action.id)\r\n    };\r\n  }),\r\n\r\n  on(Toggle, (state, action) => {\r\n    return {\r\n      ...state,\r\n      todos: state.todos.map(i => i.id === action.id ? {...i, todo: !i.todo} : i)\r\n    };\r\n  }),\r\n\r\n  on(noData, (state, action) => ({ ...state, noData: action.state})),\r\n  on(loadMyDataError, (state, action) => ({...state, error: action.error})),\r\n)"
            },
            {
                "name": "Toggle",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Todo Component] Toggle', props<{id: number}>())"
            },
            {
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/router-selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "getRouterSelectors()"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/app/store/actions.ts": [
                {
                    "name": "ActionSubmit",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Todo Component] Action Login submit', props<{ state: AuthObj}>())"
                },
                {
                    "name": "AddData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Todo Component] Add Data',props<{id: number, text: string}>())"
                },
                {
                    "name": "AddDataSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Todo Component] Add data successfully', props<{id: number, text: string}>())"
                },
                {
                    "name": "loadMyData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Todo Component] Load Data')"
                },
                {
                    "name": "loadMyDataError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Todo Component] Load Data Error', props<{ error: any }>())"
                },
                {
                    "name": "loadMyDataSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Todo Component] Load Data Success', props<{ response: Todo[], state: boolean }>())"
                },
                {
                    "name": "LoginSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Todo Component] Login success', props<{ state: AuthObj}>())"
                },
                {
                    "name": "noData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Todo Component] No data', props<{ state: boolean }>())"
                },
                {
                    "name": "Remove",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Todo Component] Remove', props<{id: number}>())"
                },
                {
                    "name": "RemoveDataSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Todo Component] Remove data successfully', props<{id: number}>())"
                },
                {
                    "name": "Reply",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Todo Component] Reply', props<{text: string, id: number}>())"
                },
                {
                    "name": "Toggle",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Todo Component] Toggle', props<{id: number}>())"
                }
            ],
            "src/app/store/reducers.ts": [
                {
                    "name": "authReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/reducers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\r\n  initialAuthState,\r\n\r\n  on(LoginSuccess, (state, action) => {\r\n    return {\r\n      ...state,\r\n      isLogged: true,\r\n      user: {username: action.state.username, password: action.state.password}\r\n    };\r\n  }),\r\n\r\n\r\n\r\n)"
                },
                {
                    "name": "initialAuthState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/reducers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AuthState",
                    "defaultValue": "{\r\n  user: {\r\n    username: '',\r\n    password: ''\r\n  },\r\n  isLogged: false\r\n}"
                },
                {
                    "name": "initialTodoState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/reducers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TodoState",
                    "defaultValue": "{\r\n  todos: [],\r\n  noData: false,\r\n  error: ''\r\n}"
                },
                {
                    "name": "todoReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/reducers.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\r\n  initialTodoState,\r\n  on(AddDataSuccess, Reply, (state, action) => {\r\n    return {\r\n      ...state,\r\n      todos: [...state.todos, { id: action.id, text: action.text, todo: true }]\r\n    };\r\n  }),\r\n\r\n  on(loadMyDataSuccess, (state, action) => {\r\n    return {\r\n      ...state,\r\n      todos: action.response,\r\n      noData: action.state\r\n    };\r\n  }),\r\n\r\n  on(RemoveDataSuccess, (state, action) => {\r\n    return {\r\n      ...state,\r\n      todos: state.todos.filter(i => i.id !== action.id)\r\n    };\r\n  }),\r\n\r\n  on(Toggle, (state, action) => {\r\n    return {\r\n      ...state,\r\n      todos: state.todos.map(i => i.id === action.id ? {...i, todo: !i.todo} : i)\r\n    };\r\n  }),\r\n\r\n  on(noData, (state, action) => ({ ...state, noData: action.state})),\r\n  on(loadMyDataError, (state, action) => ({...state, error: action.error})),\r\n)"
                }
            ],
            "src/app/components/chart/chart.stories.ts": [
                {
                    "name": "MultiLine",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/chart/chart.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "SingleLine",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/chart/chart.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/chart/chart.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ChartComponent>",
                    "defaultValue": "(args) => ({\r\n  props: args,\r\n})"
                }
            ],
            "src/app/store/selector.ts": [
                {
                    "name": "selectAllTodos",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/selector.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectTodoState,\r\n  (state: TodoState) => state.todos\r\n)"
                },
                {
                    "name": "selectAuthState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/selector.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(state: any) => state.authState"
                },
                {
                    "name": "selectHttpError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/selector.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectTodoState,\r\n  (state: TodoState) => state.error\r\n)"
                },
                {
                    "name": "selectIsLogged",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/selector.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectAuthState,\r\n  (state: AuthState) => state.isLogged\r\n)"
                },
                {
                    "name": "selectNoDataError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/selector.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectTodoState,\r\n  (state: TodoState) => state.noData\r\n)"
                },
                {
                    "name": "selectTodoById",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/selector.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\r\n  selectAllTodos,\r\n  selectRouteParams,\r\n  (todo,  todoId ) => todo.find(x => x.id == parseInt(todoId['id']))\r\n)"
                },
                {
                    "name": "selectTodoState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/selector.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(state: any) => state.todoState"
                }
            ],
            "src/app/components/table/table.stories.ts": [
                {
                    "name": "Table",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/table/table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/table/table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<TableComponent>",
                    "defaultValue": "(args) => ({\r\n  props: args,\r\n})"
                }
            ],
            "src/app/components/todo-item/todo-item.stories.ts": [
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/todo-item/todo-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<TodoItemComponent>",
                    "defaultValue": "(args: TodoItemComponent) => ({\r\n  component: TodoItemComponent,\r\n  props: args,\r\n})"
                },
                {
                    "name": "TodoItem",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/todo-item/todo-item.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "src/app/store/router-selectors.ts": [
                {
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/router-selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "getRouterSelectors()"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "dashboard",
                        "component": "DashboardTodoComponent",
                        "canActivate": [
                            "AuthGuard"
                        ]
                    },
                    {
                        "path": "dettaglio/:id",
                        "component": "DettaglioTodoComponent",
                        "canActivate": [
                            "AuthGuard"
                        ]
                    },
                    {
                        "path": "login",
                        "component": "LoginComponent"
                    },
                    {
                        "path": "**",
                        "component": "DashboardTodoComponent",
                        "canActivate": [
                            "AuthGuard"
                        ]
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/auth.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/chart/chart.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChartComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/chart/chart.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DataSets",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/chart/chart.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MultiLine",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/chart/chart.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SingleLine",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/chart/chart.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/table/table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TableComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/table/table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Table",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/table/table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/todo-item/todo-item.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TodoItemComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/todo-item/todo-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/todo-item/todo-item.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TodoItem",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/dashboard-todo/dashboard-todo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DashboardTodoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/dettaglio-todo/dettaglio-todo.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DettaglioTodoComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/pages/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/services/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/services/todo.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TodoService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ActionSubmit",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AddData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AddDataSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadMyData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadMyDataError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadMyDataSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoginSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "noData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Remove",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RemoveDataSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Reply",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Toggle",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TodoEffects",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/store/index.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AppState",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/index.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AuthState",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/store/index.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TodoState",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/interfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AuthObj",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/store/interfaces.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Todo",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "authReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialAuthState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialTodoState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "todoReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/router-selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAllTodos",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAuthState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectHttpError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectIsLogged",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectNoDataError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectTodoById",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/selector.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectTodoState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}